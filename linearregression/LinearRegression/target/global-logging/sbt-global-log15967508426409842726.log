[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Andrei\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Andrei\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.9 (Amazon.com Inc. Java 20.0.2.1)
[debug] Load.defaultLoad until apply took 503.0544ms
[debug]           Load.loadUnit: plugins took 201.464ms
[debug]           Load.loadUnit: defsScala took 0.3991ms
[debug] [Loading] Scanning directory C:\Users\Andrei\Downloads\linearregression\LinearRegression\project
[debug]             Load.loadUnit: mkEval took 42.2222ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Andrei\Downloads\linearregression\LinearRegression\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 32.6775 ms
[info] loading settings for project linearregression-build from idea.sbt ...
[debug]               Load.resolveProject(linearregression-build) took 154.728ms
[debug]             Load.loadTransitive: finalizeProject(Project(id linearregression-build, base: C:\Users\Andrei\Downloads\linearregression\LinearRegression\project, plugins: List(<none>))) took 215.2913ms
[debug] [Loading] Done in C:\Users\Andrei\Downloads\linearregression\LinearRegression\project, returning: (linearregression-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 12132.1067ms
[debug]           Load.loadUnit: cleanEvalClasses took 339.1421ms
[debug]         Load.loadUnit(file:/C:/Users/Andrei/Downloads/linearregression/LinearRegression/project/, ...) took 12681.1467ms
[debug]       Load.apply: load took 13073.34ms
[debug]       Load.apply: resolveProjects took 7.747ms
[debug]       Load.apply: finalTransforms took 124.3271ms
[debug]       Load.apply: config.delegates took 10.8421ms
[debug]       Load.apply: Def.make(settings)... took 857.6928ms
[debug]       Load.apply: structureIndex took 130.6219ms
[debug]       Load.apply: mkStreams took 1.8949ms
[info] loading project definition from C:\Users\Andrei\Downloads\linearregression\LinearRegression\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 29498.5329ms
[debug]     Load.loadUnit: defsScala took 0.0035ms
[debug] [Loading] Scanning directory C:\Users\Andrei\Downloads\linearregression\LinearRegression
[debug]       Load.loadUnit: mkEval took 35.5908ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.2891 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 133.6577ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Andrei\Downloads\linearregression\LinearRegression, plugins: List(<none>))) took 140.254ms
[debug] [Loading] Done in C:\Users\Andrei\Downloads\linearregression\LinearRegression, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 3220.1543ms
[debug]     Load.loadUnit: cleanEvalClasses took 168.6447ms
[debug]   Load.loadUnit(file:/C:/Users/Andrei/Downloads/linearregression/LinearRegression/, ...) took 32889.719ms
[debug] Load.apply: load took 32950.6159ms
[debug] Load.apply: resolveProjects took 0.1889ms
[debug] Load.apply: finalTransforms took 48.6243ms
[debug] Load.apply: config.delegates took 0.5871ms
[debug] Load.apply: Def.make(settings)... took 130.9834ms
[debug] Load.apply: structureIndex took 39.9898ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to LinearRegression (in build file:/C:/Users/Andrei/Downloads/linearregression/LinearRegression/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56032 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56032, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to LinearRegression (in build file:/C:/Users/Andrei/Downloads/linearregression/LinearRegression/)
[debug] > Exec(idea-shell, None, None)
